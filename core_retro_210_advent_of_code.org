#+title: ðŸŽ„ðŸ–¥ Core Retro 210: Advent of Code ðŸ–¥ðŸŽ„
#+EXPORT_FILE_NAME: index.html

* Background

- [[https://adventofcode.com/2022][Advent of Code]] is an advent calendar of programming puzzles created by Eric Wastl
- Each day in December there is a two part puzzle presented in the context of a Christmas themed story
- The answers can be found by creating a program (in any language) to process a unique textual "puzzle input"
- The output of the program (usually numerical, or a short string) can be exchanged for points

* The idea

- This is fun; but being purely text based has its limitations
- Being graphics developers we should be able to do better - let's try!

* Problem: Part 1

It's late on Christmas Eve. You are relaxing with the elves at the North Pole. Everyone is exhausted from the last minute push to meet the Christmas deadlines but there's still a low key a party atmosphere developing amongst the elves. Santa left several hours ago and is no doubt at this very moment squeezing his hefty frame down yet another inadequately sized chimney in the line of duty.

Just as you are about to pour yourself another sickly eggnog that elves seem so fond of... You receive an urgent message from Santa on your communications device. In your excitement you accidentally spill your sticky raw egg based beverage all over the primitive device. When you look at the screen you find to your horror that the device is malfunctioning. The message (an image and your *puzzle input*) is visible on the screen, but the device is unable to decipher Santa's top secret encryption algorithm and as such the image is completely unintelligible.

The text below the image reads:
#+begin_quote
"URGENT: I've just found this Christmas letter from Neil down the side of the seat in the sleigh, I must have missed it before. Please send me this gift ASAP! We don't have long until morning."
#+end_quote

[[file:images/encoded.png]]

You'll need to decode the message yourself to discover what Christmas gift Neil wanted.

Luckily you overheard the elves discussing how Santa's device encodes images.

The encoded image is a PNG file with 4 8-bit channels: RGBA. So each pixel has 4 values between 0-255.

1. A random key is generated and is stored in the alpha channel of the image
2. The RGB channels of the original image are combined with the key in the A channel to encrypt them in the following way:
   1. For the RED channel, the key is multiplied by 100 before being added to the original value, i.e.: ~encoded.r = orig.r + 100*orig.a~. If the result is bigger that 255, then it wraps around again to 0.
   2. The GREEN channel follows the same process, but first the key is bit shifted to the LEFT by 1 bit
   3. The BLUE channel follows the same process, but first the key is bit shifted to the RIGHT by 1 bit

For example, consider a single pixel value ~(123, 12, 34, 132)~.

The encoded value would be:

#+begin_src
( (123 + 100 * 132) % 256,
  ( 12 + 100 * 132 << 1) % 256,
  ( 34 + 100 * 132 >> 1) % 256,
  132 )
#+end_src

All you need to do to decode the image is to reverse these steps. What is the gift you need to send?

* Problem: Part 2

Oh no! A crucial piece of information is missing! Being a highly suspicious and unstable conspiracy theorist, believing that all communication channels are being observed by Grinch (who is intent on ruining Christmas), he encrypted some information before sending his letter to Santa.

You'll have to apply what you've learned already to decode it. What is the missing information?

* Solution :noexport:

** Source image

#+begin_src python :results file link :file "images/encoded1.png"
from PIL import Image
import numpy as np

src_img = Image.open("images/source.png")
noise_img = Image.open("images/noise.png")
mask_img = Image.open("images/mask.png")

src = np.asarray(src_img)
noise = np.asarray(noise_img)
mask = np.asarray(mask_img)
mask = np.greater(mask,0)

noise[...,0] = np.bitwise_and(noise[...,0], ~1)
noise[...,0] = np.bitwise_or(noise[...,0], mask[...,0])

src = np.clip(src, 1, 254)

dst = np.zeros((src_img.height, src_img.width, 4), 'uint8')
dst[...,0] = src[...,0] + mask[...,0]*100*noise[...,0]
dst[...,1] = src[...,1] + mask[...,0]*100*np.left_shift(noise[...,0],1)
dst[...,2] = src[...,2] + mask[...,0]*100*np.right_shift(noise[...,0],1)
dst[...,3] = noise[...,0]

dst_img = Image.fromarray(dst)
dst_img.save("images/encoded1.png")
#+end_src

#+RESULTS:
[[file:images/encoded1.png]]

** Encoder

#+begin_src python :results file link :file "images/encoded.png"
from PIL import Image
import numpy as np

src_img = Image.open("images/encoded1.png")

src = np.asarray(src_img)

src = np.clip(src, 1, 254)

dst = np.zeros((src_img.height, src_img.width, 4), 'uint8')
dst[...,0] = src[...,0] + 100*src[...,3]
dst[...,1] = src[...,1] + 100*np.left_shift(src[...,3],1)
dst[...,2] = src[...,2] + 100*np.right_shift(src[...,3],1)
dst[...,3] = src[...,3]

dst_img = Image.fromarray(dst)
dst_img.save("images/encoded.png")
#+end_src

#+RESULTS:
[[file:images/encoded.png]]

** Decoder

#+begin_src python :results file link :file "images/decoded1.png"
from PIL import Image
import numpy as np

src_img = Image.open("images/encoded.png")

src = np.asarray(src_img)

dst = np.zeros((src_img.height, src_img.width, 4), 'uint8')
dst[...,0] = src[...,0] - 100*src[...,3]
dst[...,1] = src[...,1] - 100*np.left_shift(src[...,3],1)
dst[...,2] = src[...,2] - 100*np.right_shift(src[...,3],1)
dst[...,3] = 255

dst_img = Image.fromarray(dst)
dst_img.save("images/decoded1.png")
#+end_src

#+RESULTS:
[[file:images/decoded1.png]]


[[file:images/decoded.png]]

#+begin_src python :results file link :file "images/decoded.png"
from PIL import Image
import numpy as np

src_img = Image.open("images/decoded1.png")
noise_img = Image.open("images/encoded.png")
# mask_img = Image.open("images/mask.png")

## TODO use the bit mask to limit the decoding region

src = np.asarray(src_img)
noise = np.asarray(noise_img)
# mask = np.asarray(mask_img)

# mask = np.greater(mask, 0)
dst = np.zeros((src_img.height, src_img.width, 4), 'uint8')
dst[...,0] = src[...,0] - 100*noise[...,3]
dst[...,1] = src[...,1] - 100*np.left_shift(noise[...,3],1)
dst[...,2] = src[...,2] - 100*np.right_shift(noise[...,3],1)
dst[...,3] = 255

dst_img = Image.fromarray(dst)
dst_img.save("images/decoded.png")
#+end_src

#+RESULTS:
[[file:images/decoded.png]]
